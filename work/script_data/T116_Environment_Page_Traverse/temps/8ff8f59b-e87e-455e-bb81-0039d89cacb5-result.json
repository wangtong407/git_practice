{"name": "使用账号密码登录", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: MicrosoftEdge=140.0.3485.81)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff733cd3f15+18309]\n\t(No symbol) [0x0x7ff733c415c0]\n\t(No symbol) [0x0x7ff733a40df0]\n\t(No symbol) [0x0x7ff733a31402]\n\t(No symbol) [0x0x7ff733a2fd88]\n\t(No symbol) [0x0x7ff733a3031c]\n\t(No symbol) [0x0x7ff733a4464a]\n\t(No symbol) [0x0x7ff733acd5de]\n\t(No symbol) [0x0x7ff733aafc7a]\n\t(No symbol) [0x0x7ff733a8443b]\n\t(No symbol) [0x0x7ff733acd082]\n\t(No symbol) [0x0x7ff733aaf943]\n\t(No symbol) [0x0x7ff733a838e6]\n\t(No symbol) [0x0x7ff733a82b52]\n\t(No symbol) [0x0x7ff733a83723]\n\t(No symbol) [0x0x7ff733b72f75]\n\t(No symbol) [0x0x7ff733b7e74d]\n\tGetHandleVerifier [0x0x7ff733d69603+630387]\n\tGetHandleVerifier [0x0x7ff733d711a1+662033]\n\t(No symbol) [0x0x7ff733c4d6a9]\n\t(No symbol) [0x0x7ff733c47044]\n\t(No symbol) [0x0x7ff733c47193]\n\t(No symbol) [0x0x7ff733c3b016]\n\tBaseThreadInitThunk [0x0x7fffaadae8d7+23]\n\tRtlUserThreadStart [0x0x7fffacd68d9c+44]", "trace": "@pytest.fixture(scope=\"module\", autouse=False)\n    def all_case_fixture():\n        # 用例的前置操作\n>       driver = driver_login_cd()\n                 ^^^^^^^^^^^^^^^^^\n\nconftest.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nconftest.py:91: in driver_login_cd\n    driver.get(url)\n..\\..\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:472: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\..\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023AEFA0FB60>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument\\\\n  (Session info: Microsof...[0x0x7ff733c3b016]\\\\n\\\\tBaseThreadInitThunk [0x0x7fffaadae8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7fffacd68d9c+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nE         (Session info: MicrosoftEdge=140.0.3485.81)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff733cd3f15+18309]\nE       \t(No symbol) [0x0x7ff733c415c0]\nE       \t(No symbol) [0x0x7ff733a40df0]\nE       \t(No symbol) [0x0x7ff733a31402]\nE       \t(No symbol) [0x0x7ff733a2fd88]\nE       \t(No symbol) [0x0x7ff733a3031c]\nE       \t(No symbol) [0x0x7ff733a4464a]\nE       \t(No symbol) [0x0x7ff733acd5de]\nE       \t(No symbol) [0x0x7ff733aafc7a]\nE       \t(No symbol) [0x0x7ff733a8443b]\nE       \t(No symbol) [0x0x7ff733acd082]\nE       \t(No symbol) [0x0x7ff733aaf943]\nE       \t(No symbol) [0x0x7ff733a838e6]\nE       \t(No symbol) [0x0x7ff733a82b52]\nE       \t(No symbol) [0x0x7ff733a83723]\nE       \t(No symbol) [0x0x7ff733b72f75]\nE       \t(No symbol) [0x0x7ff733b7e74d]\nE       \tGetHandleVerifier [0x0x7ff733d69603+630387]\nE       \tGetHandleVerifier [0x0x7ff733d711a1+662033]\nE       \t(No symbol) [0x0x7ff733c4d6a9]\nE       \t(No symbol) [0x0x7ff733c47044]\nE       \t(No symbol) [0x0x7ff733c47193]\nE       \t(No symbol) [0x0x7ff733c3b016]\nE       \tBaseThreadInitThunk [0x0x7fffaadae8d7+23]\nE       \tRtlUserThreadStart [0x0x7fffacd68d9c+44]\n\n..\\..\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidArgumentException"}, "attachments": [{"name": "log", "source": "2ce252b0-28fc-48cc-84ee-bcac35fdce56-attachment.txt", "type": "text/plain"}], "start": 1760459051021, "stop": 1760459051021, "uuid": "4252ae2d-257f-4a1c-ab03-1e1245a5dccc", "historyId": "1fd01ab6896464df1f6feeab62361621", "testCaseId": "1fd01ab6896464df1f6feeab62361621", "fullName": "script_data.T116_Environment_Page_Traverse.test_case.test_01_process_approval_case.Test_01_case#test_login", "labels": [{"name": "story", "value": "登录页面"}, {"name": "feature", "value": "登录"}, {"name": "epic", "value": "脚本名称：邦芒综合服务平台页面遍历"}, {"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "script_data.T116_Environment_Page_Traverse.test_case"}, {"name": "suite", "value": "test_01_process_approval_case"}, {"name": "subSuite", "value": "Test_01_case"}, {"name": "host", "value": "ThinkBook"}, {"name": "thread", "value": "23076-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "script_data.T116_Environment_Page_Traverse.test_case.test_01_process_approval_case"}]}